
MANUAL PARA INSTALAR "DOCKER" EN Linux (Ubuntu)
Joel Sanchez Fernandez
__________________________________________________________
Nos vamos a apoyar en:

	https://docs.docker.com/engine/install/ubuntu/
__________________________________________________________
	
		> 1. INSTALACION DE DOCKER <
	
1. Lo primero que necesitamos es actualizar nuestros paquetes con "sudo apt update". Los primeros pasos, estaran todos dentro de nuestra documentacion indicada. 

2. Seguido de la actualizacion, instalaremos los paquetes que nos hagan falta, que en este caso lo haremos "sudo apt-get install ca-certificates curl".

3. El tercer comando indicara donde lo vamos a instalar, usamos "sudo install -m 0755 -d /etc/apt/keyrings"

4. Seguido de este, usamos el paquete curl, para indicar de donde vamos a instalar la aplicacion. "sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc"

5. En este paso, necesitaremos modificar los permisos del archivo recientemente creado, para esto hacemos "sudo chmod a+r /etc/apt/keyrings/docker.asc"

6. Y por ultimo, agregamos el siguiente comando ->

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

__________________________________________________________

	   > 2. COMPROBAMOS EL USO DEL USUARIO <

1. Despues de la instalacion necesitamos ingresar en nuestro directorio 'root'. Que lo hacemos con "sudo su -".

2. Una vez dentro necesitaremos ingresar en el repositorio que nosotros mismos le hemos indicado "cd /etc/apt/sources.list.d/".

3. Hacemos un "ls" para comprobar que tenemos docker en la carpeta, y realizamos "cat docker.list" para confirmar que lo hemos guardado.

4. Ahora haremos la instalacion completa de Docker en nuestro sistema con el comando "sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin".

5. Vamos a cambiar el grupo del usuario para que pueda usar docker, "sudo usermod -aG docker $USER".

6. Usamos "exit" las veces necesarias para salir a la terminal de nuestro directorio personal.

7. Una vez en nuestro directorio, usamos "docker --version", si nos la muestra, esta instalado correctamente.

__________________________________________________________

		> 3. DENTRO DE DOCKER <
		
1. Para iniciar un contener se usa "docker run hello-world" o "docker container run" o "docker create hello-world" (Pero este lo creo sin ejecutarse el contenedor), se podria ejecutar con "docker start -a".

2. Para ver donde esta guardado el contenedor usamos "docker ps -a", donde nos muestra su ID, su IMAGE, cuando se creo...

3. Para poder borrar un contenedor usamos "docker rm [ID del contenedor]"

4. Si queremos ver nuestras imagenes descargadas en nuestro repositorio local usamos "docker images"

5. Para cambiar el nombre de origen de un contenedor de docker usamos el comando "docker rename [NombreOriginal] [NombreQueQueremos]". Luego usamos "docker ps -a" para ver si se ha cambiado correctamente

__________________________________________________________

		 > 4. DOCKER COMANDOS <
		
1. Para poder ver los eventos que ocurren en nuestro contenedor en tiempo real, usamos el comando "docker events", te mostrara los comandos que se estan ejecutando

2. Para crear un contenedor interactivo, en el que nosotros podremos entrar y salir a nuestro placer, creamos el contenedor con "docker run -it --name contenedorInteractivo -h contenedorInteractivo ubuntu bash".
Para entrar al contenedor usamos "docker start [nombreContenedor]", si el contenedor tiene un 'bash' y queremos cambiar a la entrada 'bash', usamos "docker attach [nombreContenedor]". Y para salir de este, usamos "exit".

3. Para comprobar que los contenedor solo se ejecutan con un servicio activo "docker run -it --rm --name contenedorQueSeBorra ubuntu top", nos mostrara los servicios activos

4. Para crear un contenedor demonio que se ejecute todo el rato, creamos el contenedor demonio con "docker run -d --name contenedorDemonio ubuntu bash -c "while true; do echo Hello World; sleep 1; done"". Luego para ejecutarlo podemos usarlo con "docker logs contenedorDemonio" o "docker attach contenedorDemonio".

5. Para parar un contenedor demonio usamos "docker stop [nombreContenedor]". Y luego de esto ya podremos borrarlo tranquilamente.

6. Para crear un contedor con una variable de entorno (variable global) que luego podremos usar es "docker run -it --name contenedorVariableGlobal -e USUARIO=Joel ubuntu bash".

		  EJEMPLO DIDACTICO
		  
1. Creamos nuestro contenedor demonio con ciertos ajustes como "docker run -d --name horaLocal ubuntu bash -c 'while true; do echo $(date +"%T"); sleep 1; done'". Esto nos ejecturara el 'echo' cambiando la hora un segundo mas con el comando 'sleep'.

2. Cuando ejecutamos este contenedor con "docker logs -f [nombreContenedor]" este no para y cada segundo te muestra un nuevo registro. En otra terminal podemos usar los comandos como "docker unpause [nombreContenedor]" o "docker pause [nombreContenedor]".

                  OTRO EJEMPLO
                  
1. Ahora quiero crear otro demonio solo con la fecha, pero quiero que me guarde la informacion en un archivo de dentro del contenedor que se llama 'hora.txt'. Creamos el contenedor demonio con "docker run -d --name horaLocal2 ubuntu bash -c 'while true; do date >> hora.txt; sleep 1; done'"


__________________________________________________________

                  EJECUCIONES EN DOCKER
                  
1. Tenemos un comando para ver la info de un directorio del contenedor, que podemos usar "docker exec [nombreDirectorio] ls", nos muestra los archivos del contenedor
2. Tambien podemos combinarlo con otros como "docker exec [nombreContenedor] cat [nombreArchivo]".

3. Para copiar un archivo de nuestro usuario y moverlo al contenedor que queramos, usamos "docker cp [nombreArchivo] [nombreContenedor]:/".

4. Con "docker top" vemos todo lo que se esta ejecutando.

5. Con "docker inspect [nombreContenedor]" veremos una serie de informacion que se nos muestra de ese contenedor.


